#!/usr/bin/env ruby

# Interaktive Schnitzeljagd, um die Linux-Konsole kennen zu lernen.
# Basierend auf einer Idee von Eugen Krizki and Richard Vladimirskij,
# siehe https://github.com/limecakeio/pepio
# (c) 2019 Thomas Smits

# Settings and constants
# ------------
# Constants
# ------------

# Width of the terminal
LINE_WIDTH = 80

# Base path to all our files (User's home)
BASE_PATH = "#{Dir.home}"

# Our directory (without base path)
PROJEKT_PATH = "linux-kurs"

# Full Path
PATH = "#{BASE_PATH}/#{PROJEKT_PATH}"

# File to log the progress
LOG_FILE = "#{PATH}/.schnitzel.log"

# Text ot ask for <ENTER>
ENTER_TEXT = "Drücken Sie <ENTER>, um die Lösung zu überprüfen:"

# Wrong solution
WRONG_SOLUTION = "Leider falsch. Probieren Sie es noch einmal."

# Motivation phrases for wrong solutios
WRONG_SOLUTION_MOTIVATION = ["Es ist noch kein Meister vom Himmel gefallen!", "Bitte geben Sie nicht auf!", "Sie können Ihre Zukunft verändern mit dem was Sie heute tun!", "Wer die Linux Console lernt, macht Fehler. Wer viel von der Linux Console lernt, macht mehr Fehler. Nur wer die Hände in den Schoß statt auf die Tastatur legt, macht gar keine Fehler.", "Selbst der schlimmste Fehler ist nicht so schlimm, wie es nie versucht zu haben! Weiter versuchen!"]

# Correct solution
CORRECT_SOLUTION = "Korrekt."

# Prais phrases for correct solutions
CORRECT_SOLUTION_PRAISES = ["Gut gemacht!", "Großartig!", "Außerordentlich gut!", "Weiter so!", "Sehr gut gemacht!", "Prima!", "Super Leistung!", "Top Leistung!", "Top!", "Wunderbar!", "Toll!", "Spitze!", "Wundervoll!", "Herausragend!", "Hervorragend!", "Toll gemacht!", "Super!" , "Einsame Spitze!", "Grandios!", "Bravo!",  "Sensationell!", "Weiter so!", "Meisterhaft!", "Spitzenmäßig!", "Stark!", "Klasse gemacht!", "Astrein!"]

# Location of the prepared tar
CHAOS_URL = "https://github.com/informatik-mannheim/schnitzel/raw/master/chaos.tar.xz"

# Message shown if all exercises were done
WINNER_MESSAGE = %q{
 _    _  _                             _    _  _
| |  | |(_)                           | |  | |(_)
| |  | | _  _ __   _ __    ___  _ __  | |  | | _  _ __   _ __    ___  _ __
| |/\| || || '_ \ | '_ \  / _ \| '__| | |/\| || || '_ \ | '_ \  / _ \| '__|
\  /\  /| || | | || | | ||  __/| |    \  /\  /| || | | || | | ||  __/| |
 \/  \/ |_||_| |_||_| |_| \___||_|     \/  \/ |_||_| |_||_| |_| \___||_|

 _____  _      _        _                 ______  _
/  __ \| |    (_)      | |                |  _  \(_)
| /  \/| |__   _   ___ | | __ ___  _ __   | | | | _  _ __   _ __    ___  _ __
| |    | '_ \ | | / __|| |/ // _ \| '_ \  | | | || || '_ \ | '_ \  / _ \| '__|
| \__/\| | | || || (__ |   <|  __/| | | | | |/ / | || | | || | | ||  __/| |
 \____/|_| |_||_| \___||_|\_\\\\___||_| |_| |___/  |_||_| |_||_| |_| \___||_|
}

# Some "arbitrary" file names
FILENAMES = %w{ Battlefield BioShock Borderlands Burnout Castlevania Crysis Deponia
                Doom Elite Fallout Halo Hitman Minecraft Payday Prey Quake Rayman Risen
                Splatoon Thief Uncharted Witcher Wolfenstein Yakuza Zork }


# Class for the definition of exercises
##
# Class to store the single exercises to be performed
# by the students.
class Exercise
  attr_accessor :title, :purpose, :task, :input_message, :solution, :check, :setup, :teardown

  ##
  # Create a new instance.
  #
  # @param title String the title of the exercise
  # @param purpose String what should the student now beforehand
  # @param task String the actual task to be performed
  # @param input_message String|symbol what to display as input prompt. If set to
  #        symbol :enter the standard Message from ENTER_TEXT ist printed
  # @param solution String the correct command
  # @param check Proc check for the exercise, returns +true+ or +false+
  # @param setup Proc preparation of the exercise. Ignored if nil
  # @param teardown Proc cleanup after the exercise
  def initialize(title, purpose, task, input_message, solution, check, setup = nil, teardown = nil)
    @title = title
    @purpose = purpose
    @task = task
    @input_message = input_message
    @solution = solution
    @check = check
    @setup = setup
    @teardown = teardown
  end

  ##
  # Execute this exercise
  # @param os Symbol the operating system. Passed thru to the
  #                  check lambda
  def execute(os)

    @setup.call if @setup
    puts "#{red(@title)}\n\n"
    puts "#{yellow(@purpose)}\n\n"

    # allow free formatting of the text in the input, Remove
    # leading blanks
    task_text = @task.strip.split("\n").map(&:strip)

    # ensure that on the terminal no newline appears in the middle of
    # a word
    task_text.map! { |line| fit(line, LINE_WIDTH) }

    # highlight keywords
    task_text.map! { |line| highlight(line) }

    # print the text
    puts %Q{#{task_text.join("\n")}\n\n}

    begin
      if @input_message == :enter
        # standard text asking for <ENTER>
        print "#{bold(ENTER_TEXT)} "
        $stdin.gets
      else
        # user defined message
        print "#{bold(@input_message)} "
      end

      # Call the check. Lambdas enforce arity, therefore
      # we check it before calling the Proc/Lambda to avoid
      # crashes
      passed = if @check.arity == 1
                 @check.call(os)
               else
                 @check.call
               end

      if !passed
        puts red("\n#{WRONG_SOLUTION}\n")

        # format the motivation in the same way as the task
        motivation = WRONG_SOLUTION_MOTIVATION.sample.strip.split("\n").map(&:strip)
        motivation.map! { |line| fit(line, LINE_WIDTH) }

        puts red("#{motivation.join("\n")}\n")
      end

    end while !passed

    praise = CORRECT_SOLUTION_PRAISES.sample
    puts green("\n#{CORRECT_SOLUTION} #{praise}\n")

  end
end


# Helper functions
# ------------
# Helper functions
# ------------

require 'time'

##
# Get an input from stdin
# @return String the data
def read_console
  $stdin.gets.strip
end

##
# Get an input from stdin and convert to an integer
# @return Integer the data
def read_console_i
  $stdin.gets.strip.to_i
end

##
# Create a directory (if not already present) and set
# the protections according to the given mask
# @param path String path to the directory
# @param mask Integer umask to be used in creating the direcory
def mkdir(path, mask = 0700)
  Dir.mkdir(path, mask) unless Dir.exist?(path)
end

##
# Fill an directory with files
# @param path String path to the directory
def fill_dir(path)
  FILENAMES.each { |l| File.write("#{path}/#{l}", "Gehen Sie weiter, hier gibt es nichts zu sehen.") }
end

##
# Create the working directory for the tasks
def create_workdir
  mkdir("#{PATH}")
end

##
# Format the text for an ANSI terminal in red
# @param txt String the text to be formatted
# @return String the formatted text
def red(txt)
  "\033[1;31m#{txt}\033[0m"
end

##
# Format the text for an ANSI terminal in green
# @param txt String the text to be formatted
# @return String the formatted text
def green(txt)
  "\033[32m#{txt}\033[0m"
end

##
# Format the text for an ANSI terminal in blue
# @param txt String the text to be formatted
# @return String the formatted text
def blue(txt)
  "\033[34m#{txt}\033[0m"
end

##
# Format the text for an ANSI terminal in yellow
# @param txt String the text to be formatted
# @return String the formatted text
def yellow(txt)
  "\033[33m#{txt}\033[0m"
end

##
# Format the text for an ANSI terminal in grey
# @param txt String the text to be formatted
# @return String the formatted text
def grey(txt)
  "\033[30m#{txt}\033[0m"
end

##
# Format the text for an ANSI terminal in bold
# @param txt String the text to be formatted
# @return String the formatted text
def bold(txt)
  "\033[1m#{txt}\033[0m"
end

##
# Format the text for an ANSI terminal in underline
# @param txt String the text to be formatted
# @return String the formatted text
def underline(txt)
  "\033[4m#{txt}\033[0m"
end

##
# Provide ANSI escape sequence to clear the screen
# @return String the clearing sequence
def cls
  "\033[2J\033[H"
end

##
# Create a progress bar string
# @param max Integer maximum value
# @param actual Integer actual value
# @param width Integer width of the bar (including the a/m display)
def progress_bar(max, actual, width)

  corrected_width = width - max.to_s.length*2 - 2

  progress = actual.to_f / max.to_f
  filled = (corrected_width * progress).to_i
  empty = (corrected_width - filled).to_i

  output = ''
  filled.times { output << "\u2588" }
  empty.times { output << "\u2591" }

  output << " #{actual}/#{max}"

  output
end

##
# Get the last exercise from the log file, if present. Otherwise
# return 0
# @return the last exercise sucessfully performed
def next_exercise_from_log
  start = 0
  if File.exist?(LOG_FILE)
    contents = File.readlines(LOG_FILE)
    start = contents.last.split("\t").first.to_i + 1
  else
    log('-1', 'first run')
  end
  start
end

##
# Get the start time from log, if log file is present. Otherwise
# return 1.1.1900
# @return the time obj of first run
def get_first_starttime
  time = Time.local(1900, 1, 1)
  if File.exist?(LOG_FILE)
    contents = File.readlines(LOG_FILE)
    time = Time.parse(contents.first.split("\t")[3].to_s)
  end
  time
end

##
# Get the last modification time from the log file = the date  when the user
# finished schnitzel, if present. Otherwise return 1.1.1900
# @return the date obj when the user finished schnitzel
def get_end_time
  time = Time.local(1900, 1, 1)
  if File.exist?(LOG_FILE)
    time = File.mtime(LOG_FILE)
  end
  time
end

##
# Log the sucess of an exercise
# @param index the index of the exercise performed
def log_success(index, exercise)
  log(index, exercise.title)
end

##
# Log the event
# @param index the index of the exercise performed
def log(index, title)
  create_workdir
  File.open(LOG_FILE, "a") do |f|
    f.print("#{index}\t#{ENV['USER']}\t'#{title}'\t#{Time.new}\n")
  end
end

##
# Highlight words in ` ` and _ _ in the given string using ANSI escape sequences
# @param input String the input
# @return String the input with highlights
def highlight(input)
  result = input
  while result =~ /(.*)`(.*?)`(.*)/m # multiline match (m)
    result = "#{$1}#{bold($2)}#{$3}"
  end

  while result =~ /(.*)_(.*?)_(.*)/m # multiline match (m)
    result = "#{$1}#{underline($2)}#{$3}"
  end

  result
end

##
# Break the text in a way that it fits on the given width
# without having a break in the middle of a word.
# @param input String the text
# @param width Integer the width
# @return String the text with additional newlines
def fit(input, width)
  words = input.split(' ')
  result = ''
  line_length = 0
  words.each_with_index do |w, i|
    line_length += w.gsub(/`/, '').gsub(/_/, '').length # don't count ` and _
    if line_length > width
      # line full, start a new line
      result << "\n"
      line_length = w.length
    elsif i > 0
      # not the first word, add a blank
      result << ' '
      line_length += 1
    end
    result << w
  end
  result
end


# ------------
# The exercises
# ------------

@exercises = []

# Include the different exercises here
# man
@exercises << Exercise.new(
    'Hilfe',
    'Lernen Sie, sich die Hilfe von Programmen anzeigen zu lassen.',
    %Q{
      Sie möchten mehr über ein Linux-Kommando erfahren. Dies erfolgt bei den meisten Kommandos über den Befehl `man`. Bei manchen Kommandos kann man auch als Option `--help` angeben.

      Geben Sie `man ls` ein und finden Sie heraus, mit welcher Option von `ls` man die Einträge nach dem _Datum der letzen Veränderung_ sortieren kann. (Man kann die Anzeige von `man` mit `Q` verlassen und mit `/` darin suchen.)
    },
    'Wie lautet das gesuchte Kommando (inklusive ls)?',
    'ls -t',
    -> () { read_console == 'ls -t' }
)

# vi / nano
@exercises << Exercise.new(
  'Erstkontakt',
  'Lernen Sie in Verzeichnisse zu wechseln (cd) und Dateien zu editieren (vi / nano).',
  %Q{
    Sie möchten eine Datei mit Ihrem Lieblingsfilm anlegen - der übrigens "_Pulp Fiction_" heißt.

    Das Verzeichnis `#{PROJEKT_PATH}` ist das Grundverzeichnis dieser Schnitzeljagd, Sie finden es immer als Unterordner des Verzeichnisses `#{BASE_PATH}`.

    Gehen Sie in das Verzeichnis `#{PROJEKT_PATH}` und legen Sie dort eine Datei mit dem Namen `film.txt` an, in die Sie "Pulp Fiction" schreiben. Verwenden Sie hierzu entweder den _Editor_ `vi` oder `nano`.
  },
  :enter,
  'cd ; cd linux-kurs ; echo "Pulp Fiction" > film.txt',
  -> () { f = "#{PATH}/film.txt"; File.exists?(f) && File.read(f).strip == "Pulp Fiction" },
  -> () { create_workdir }
)

# vi / nano
@exercises << Exercise.new(
  'Datei editieren',
  'Eine vorhandene Datei mit einem Editor bearbeiten.',
  %Q{
    Sie möchten eine Datei mit Lieblingsfilmen von jemand anderem editieren.

    Gehen Sie in das Verzeichnis `#{PROJEKT_PATH}` und editieren Sie die Datei `prof-filme.txt`, die dort liegt. _Entfernen_ Sie den Film "_Blade Runner_", den Sie (unverständlicherweise) persönlich nicht mögen.
  },
  :enter,
  'vi prof-filme.txt; J DD :w :q',
  -> () { File.read("#{PATH}/prof-filme.txt").strip == "Pulp Fiction\nAlien\nFight Club" },
  -> () { create_workdir; File.write("#{PATH}/prof-filme.txt", "Pulp Fiction\nBlade Runner\nAlien\nFight Club\n") }
)

# less
@exercises << Exercise.new(
  'Der Preis eines Schnitzels',
  'Machen Sie sich mit der Funktionsweise von cd, ls, less und more vertraut.',
  %Q{
    Sie führen ein Schnitzelrestaurant und haben leider vergessen, was Sie für Ihre Gerichte verlangen.

    Zum Glück haben Sie die Speisekarte in der Datei `speisekarte.txt` im `#{PROJEKT_PATH}`-Ordner gespeichert.

    Schauen Sie in der Datei nach dem _Preis für ein Wiener Schnitzel_.
  },
  'Welchen Preis hat das Wiener Schnitzel?',
  'less speisekarte.txt',
  -> () { read_console == "23,42" },
  -> () { File.write("#{PATH}/speisekarte.txt", "Wiener Schnitzel 23,42\nJägerschnitzel 28,44\nBauernschnitzel 24,13\n") }
)

# mkdir / cp
@exercises << Exercise.new(
  'Life, Death & Taxes',
  'Machen Sie sich mit der Funktionsweise von mkdir und cp vertraut.',
  %Q{
    Der Steuerberater Ihres Restaurants braucht ein paar Unterlagen von Ihnen.

    _Erstelle_ für ihn einen _Ordner_ `tax-man` im `#{PROJEKT_PATH}`-Verzeichnis.

    _Kopieren_ Sie die Datei `speisekarte.txt` aus dem `#{PROJEKT_PATH}`-Verzeichnis in das `tax-man` Verzeichnis.
   },
   :enter,
   'mkdir tax-man; cp speisekarte.txt tax-man/',
  -> () { File.exists?("#{PATH}/tax-man/speisekarte.txt") && File.read("#{PATH}/speisekarte.txt") == File.read("#{PATH}/tax-man/speisekarte.txt") }
)

# mv
@exercises << Exercise.new(
    'Geld stinkt nicht',
    'Machen Sie sich mit der Funktionsweise von mv vertraut.',
    %Q{
      Ihr Steuerberater braucht noch weitere Unterlagen, die alle im Ordner `#{PROJEKT_PATH}/laundry` liegen.

      _Bewegen_ Sie den Ordner `laundry`, samt seines Inhaltes, in das `tax-man`-Verzeichnis in `#{PROJEKT_PATH}`.
    },
    :enter,
    'mv laundry tax-man',
    -> () do
        ok = true
        ('a'..'z').each { |l| ok = ok && File.exists?("#{PATH}/tax-man/laundry/#{l}") }
        Dir.exists?("#{PATH}/tax-man/laundry") &&
        !Dir.exists?("#{PATH}/laundry") && ok
    end,
    -> () do
      mkdir("#{PATH}/laundry")
      ('a'..'z').each { |l| File.write("#{PATH}/laundry/#{l}", "--egal--") }
    end
)

# rm
@exercises << Exercise.new(
    'Unter den Teppich kehren',
    'Machen Sie sich mit der Funktionsweise von rm vertraut.',
    %Q{
      Sie sind sich klar geworden, dass man eine Speisekarte vielleicht doch nicht als .txt-Datei verwaltet und haben die Daten bereits in einer Datenbank gespeichert.

      _Löschen_ Sie die Datei `speisekarte.txt` aus dem `#{PROJEKT_PATH}`-Verzeichnis.
    },
    :enter,
    'rm speisekarte.txt',
    -> () { !File.exists?("#{PATH}/speisekarte.txt") }
)

# whoami
@exercises << Exercise.new(
    'Wer bin ich?',
    'Machen Sie sich mit der Funktionsweise von whoami vertraut.',
    %Q{
      Finde Sie heraus, als _welcher Benutzer_ Sie im System angemeldet sind.
    },
    'Tragen Sie hier ein, wie Ihr Benutzer heißt:',
    'whoami',
    -> () { read_console == ENV['USER'] }
)

# ls -axl
@exercises << Exercise.new(
    'Wem gehört denn das?',
    'Vertiefen Sie Ihr Wissen zu ls.',
    %Q{
      Sie verwalten Dateien zu zwielichtigen Geschäften im Ordner `shady-business` im `#{PROJEKT_PATH}`-Verzeichnis.

      Finden Sie heraus, welcher Benutzer der _Besitzer des Ordners_ `shady-business` ist.
    },
    'Trage Sie hier den Namen des Besitzers ein:',
    'ls -axl',
    -> () { read_console == ENV['USER'] },
    -> () { mkdir("#{PATH}/shady-business", 0700) }
)

# sudo / chown
@exercises << Exercise.new(
    'What a Superuser can do',
    'Machen Sie sich mit der Funktionsweise von sudo und chown vertraut.',
    %Q{
      Nutzen Sie die Macht eines Superusers und _ändern_ Sie den _Besitzer_ des Ordners `shady-business` auf `nobody`, damit man Ihnen später nichts nachsagen kann.
    },
    :enter,
    'sudo chown nobody shady-business',
    -> (os) do
      if os == :linux
        `stat -c %U #{PATH}/shady-business`.strip == 'nobody'
      elsif os == :macos
        `stat -f %Su #{PATH}/shady-business`.strip == 'nobody'
      end
    end,
    -> () { mkdir("#{PATH}/shady-business"); fill_dir("#{PATH}/shady-business") }
)

# mv
@exercises << Exercise.new(
    'Move on...there is nothing to see here',
    'Frischen Sie Ihr Wissen zu mv ein wenig auf.',
    %Q{
      Das Finanzamt hat Unstimmigkeiten in Ihrer Steuererklärung festgestellt und Sie wollen Ihre Spuren zu den zwielichtigen Geschäften verwischen.

      _Änderen_ Sie den _Namen des Ordners_ `shady-business` in `nothing-to-see-here` um.
    },
    :enter,
    'sudo mv shady-business nothing-to-see-here',
    -> () { !File.exists?("#{PATH}/shady-business") && File.exists?("#{PATH}/nothing-to-see-here") }
)

# chmod
@exercises << Exercise.new(
    'Read, Write and Execute',
    'Machen Sie sich mit der Funktionsweise von chmod vertraut.',
    %Q{
      Ihre Geschäftspartner brauchen Zugang zu den zwielichtigen Dokumenten.

      _Änderen_ Sie die _Zugriffsrechte_ des `nothing-to-see-here`-Ordners so um, dass jeder Benutzer darin lesen, schreiben und ausführen kann.
    },
    :enter,
    'sudo chmod og+rwx nothing-to-see-here',
    -> (os) do
      if os == :linux
        p = `stat -c %a #{PATH}/nothing-to-see-here`.strip
      elsif os == :macos
        p = `stat -f %Lp #{PATH}/nothing-to-see-here`.strip
      end

      p == '777' || p == '707'
    end
)

# rm -rf
@exercises << Exercise.new(
    'Ist das Kunst, oder kann das weg?',
    'Frischen Sie Ihr Wissen zu rm ein wenig auf.',
    %Q{
      Die Steuerfahndung ist Ihnen auf der Spur und Ihnen wird die Sache zu heiß. Sie entscheiden sich, alle Dokumente, die Sie mit zwielichtigen Geschäften in Verbindung bringen könnten zu löschen.

      _Löschen Sie den Ordner_ `nothing-to-see-here`, zusammen mit seinem Inhalt.
    },
    :enter,
    'rm -rf nothing-to-see-here',
    -> () { !File.exists?("#{PATH}/nothing-to-see-here") }
)

# wget or curl
CHAOS_SIZE = 2405800

@exercises << Exercise.new(
    'Ein neues Kapitel',
    'Machen Sie sich mit der Funktionsweise von wget oder curl vertraut.',
    %Q{
      Sie haben sich auf eine karibische Insel abgesetzt und wollen dort mit einem Schnitzelrestaurant wieder neu anfangen, diesmal aber ohne zwielichtige Geschäftspraktiken. Noch in Deutschland haben Sie wichtige Dokumente archiviert und online gestellt.

      Laden Sie die Datei unter: `#{CHAOS_URL}`

      ...in das `#{PROJEKT_PATH}`-Verzeichnis herunter.
    },
    :enter,
    "wget #{CHAOS_URL} or curl -ON #{CHAOS_URL}",
    -> () { File.exists?("#{PATH}/chaos.tar.xz") && File.size("#{PATH}/chaos.tar.xz") == CHAOS_SIZE }
)

# tar
CHAOS_FILE_COUNT = 66893

@exercises << Exercise.new(
    'Archive',
    'Machen Sie sich mit der Funktionsweise von tar vertraut.',
    %Q{
      Die Dokumente wurden in einem Archiv gespeichert, um sie kompakt und gebündelt zu verwalten.

      _Entpacken_ Sie das heruntergeladene Archiv in den Ordner `#{PROJEKT_PATH}`.
    },
    :enter,
    'tar -xJf chaos.tar.xz',
    -> () { Dir.exists?("#{PATH}/chaos") && Dir["#{PATH}/chaos/**/*"].count == CHAOS_FILE_COUNT }
)

# find / wc
CHAOS_TXT_FILE_COUNT = 32771

@exercises << Exercise.new(
    'Find what you search for',
    'Machen Sie sich mit der Funktionsweise von find, wc und Pipes zur Ausgabeumleitung (|) vertraut.',
    %Q{
      Sie wollen sich erstmal einen Überblick über Die wichtigsten Dokumente verschaffen, die alle als .txt-Dateien in `#{PROJEKT_PATH}/chaos` gespeichert sind.

      Finden Sie _alle_ .txt-Dateien im `chaos`-Ordner (und den Unterordnern).
    },
    'Trage hier ein, wieviele .txt-Dateien im Ordner vorhanden sind:',
    'find chaos/ -name "*.txt" | wc',
    -> () { read_console_i == CHAOS_TXT_FILE_COUNT }
)

# grep
@exercises << Exercise.new(
    'Find the key',
    'Machen Sie sich mit der Funktionsweise von grep vertraut.',
    %Q{
      Sie suchen nach einem wichtigen Passwort, wissen aber nicht mehr wo es steht.

      Sie wissen nur, dass es irgendwo in einer Datei im `chaos`-Ordner gespeichert ist und sowohl mit einem `"#"` anfängt, als auch aufhört.

      Navigieren Sie in den Ordner `#{PROJEKT_PATH}/chaos`.

      Nutzen Sie `grep`, um das Passwort zu finden. (Tipp: der richige reguläre Ausdruck ist `#.*#`).
    },
    'Wie lautet das magische Passwort?',
    'cd chaos; grep -roh "#.*#" .',
    -> () { read_console == "parmigiana4life" || read_console == "#parmigiana4life#" }
)

# diff
@exercises << Exercise.new(
    'Find the difference',
    'Machen Sie sich mit der Funktionsweise von diff vertraut.',
    %Q{
      Sie suchen nach einem kleinen Unterschied zwischen zwei Dateien.

      Verwenden Sie `diff`, um den _Unterschied_ zwischen den beiden Dateien `kafka1.txt` und `kafka2.txt` im `chaos`-Ordner zu finden.
    },
    'Wie lautet der Unterschied?',
    'diff kafka1.txt kafka2.txt',
    -> () { read_console == "Informatik ist cool" }
)

# sort / uniq / > / |
@exercises << Exercise.new(
    'Sortieren und ordnen',
    'Machen Sie sich mit der Funktionsweise von sort, uniq und der Ausgabeumleitung (<,>,|) vertraut.',
    %Q{
      Im Ordner `chaos` befindet sich eine Wortliste in der Datei `wortliste.txt`, die jedoch beim Transport heftig durcheinander geraten ist. Außerdem sind noch einige Worte mehrfach vorhanden.

      Verwenden Sie `sort` und `uniq`, um die Liste zu sortieren und Doubletten zu entfernen. Speichern Sie das Ergebnis in der Datei `wortliste_sortiert.txt` _direkt im Ordner `#{PROJEKT_PATH}`_.
    },
    :enter,
    'cd chaos; sort wortliste.txt | uniq > ../wortliste_sortiert.txt',
    -> () { f = "#{PATH}/wortliste_sortiert.txt"; File.exists?(f) && (File.readlines(f)[142].strip == 'ausbauchen' || File.readlines(f)[142].strip == 'Behelfsverkaufsstelle') }
)

# grep / sed / | / >
@exercises << Exercise.new(
    'Monnheim',
    'Machen Sie sich mit der Funktionsweise von grep, sed und der Ausgabeumleitung (<,>,|) vertraut.',
    %Q{
      Sie wollen aus der sortierten Wortliste einige Wörter mit `grep` heraussuchen und diese dann mit `sed` verändern.

      Finden Sie alle Wörter in der Liste `wortliste_sortiert.txt`, in denen die Buchstabenfolge `"heim"` vorkommt. Ersetzen Sie diese Buchstaben durch `"mannheim"` und schreiben Sie das Ergebnis in eine neue Datei `"monnheim.txt"` im Ordner `#{PROJEKT_PATH}`.
    },
    :enter,
    'grep heim wortliste_sortiert.txt | sed -e "s/heim/mannheim/g" > monnheim.txt',
    -> () { f = "#{PATH}/monnheim.txt"; File.exists?(f) && File.readlines(f).map(&:chomp) == [ 'Billigmannheim', 'Blindenmannheim', 'Gemannheimkonto', 'Saisonmannheimspiel', 'Sportlermannheim' ] }
)

# ln -s
@exercises << Exercise.new(
    'Was heißt hier Softie?',
    'Machen Sie sich mit der Funktionsweise von Hard- und Softlinks und dem Kommando "ln" vertraut.',
    %Q{
      Im Ordner `#{PROJEKT_PATH}` finden Sie eine Datei namens `highlander.txt`. Erstellen Sie einen _Softlink_ (symbolischer Link) namens `macleod.txt` auf diese Datei.
    },
    :enter,
    'ln -s highlander.txt macleod.txt',
    -> () { f = "#{PATH}/macleod.txt"; File.exists?(f) && File.symlink?(f) },
    -> () { f = "#{PATH}/highlander.txt"; File.write(f, "Es kann nur einen geben!\n\n") unless File.exists?(f) }
)

# ln
@exercises << Exercise.new(
    'Nur die Harten kommen in den Garten',
    'Machen Sie sich mit der Funktionsweise von Hard- und Softlinks und dem Kommando "ln" vertraut.',
    %Q{
      Im Ordner `#{PROJEKT_PATH}` finden Sie eine Datei namens `highlander.txt`. Erstellen Sie einen _Hardlink_ namens `fasil.txt` auf diese Datei.

      Öffnen Sie nun `fasil.txt` in einem Texteditor und ändern Sie den Inhalt zu `"Es kann nur zwei geben!"` und speichern Sie den Inhalt. Sehen Sie sich danach die Datei `highlander.txt` an.
    },
    :enter,
    'ln highlander.txt fasil.txt',
    -> (os) do
      f = "#{PATH}/fasil.txt"
      File.exists?(f) && File.read(f).strip == "Es kann nur zwei geben!" && \
      if os == :linux
        `stat -c %h #{f}`.strip == "2"
      elsif os == :macos
        `stat -f %l #{f}`.strip == "2"
      end
    end,
    -> () { f = "#{PATH}/highlander.txt"; File.write(f, "Es kann nur einen geben!\n\n") unless File.exists?(f) }
)

# ps / kill
@exercises << Exercise.new(
    'Vertrauen ist nichts, Kontrolle ist alles',
    'Machen Sie sich mit der Funktionsweise "ps" und "kill" vertraut.',
    %Q{
      Auf Ihrem System läut ein Prozess mit dem Namen `"sleep"`, der Ihrem Benutzer gehört. Finden Sie ihn und _beenden Sie den Prozess_. Möglicherweise laufen auch mehrere Prozesse, dann beenden Sie alle mit dem Namen `"sleep"` und Ihrem Benutzernamen.
    },
    :enter,
    'ps aux | grep sleep ; kill PID',
    -> () { `ps aux | grep sleep | grep $USER | grep -v "grep"`.strip == "" },
    -> () { p = fork { exec "sleep 100000" }; Process.detach(p) }
)

# cal
@exercises << Exercise.new(
    'Sag niemals nie.',
    'Machen Sie sich mit der Funktionsweise von "cal" vertraut.',
    %Q{
      An der Strandbar lernen Sie einen Ureinwohner der karibischen Insel kennen, der Ihnen eine Location für Ihr neues Schnitzelrestaurant vermieten könnte. Dieser behauptet, dass das Haus von seinen Vorfahren im kürzesten Monat des Jahres 1752 erbaut worden sei.
      Als der Ureinwohner den Monat nennt, brechen Sie in Lachen aus: "Das war noch nie der kürzeste Monat eines Jahres!"
      Zum Beweis lassen Sie sich mit Hilfe des Befehles `cal` den Überblick des Jahres 1752 anzeigen.

      Finden Sie mit Hilfe der _Jahresübersicht des Befehls `cal`_ heraus, welcher Monat in dem Jahr 1752 der kürzeste Monat war und zählen Sie, wiviele einzelne Tage dieser laut `cal` hatte.
    },
    'Wie viele Tage hatte der September 1752?',
    'cal 1752',
    -> () { read_console == '19' }
)

# df
@exercises << Exercise.new(
    'Man kann nie genug Platz haben.',
    'Machen Sie sich mit der Funktionsweise von "df" vertraut.',
    %Q{
      Ihr Schnitzelrestaurant läuft super und es fallen immer mehr Daten an, die Sie speichern müssen, z.B. Schnitzelrezepte aus aller Welt. Langsam machen Sie sich Sorgen, ob der Platz auf Ihrer Festplatte für diese Datenmengen ausreicht.

      Benutzen Sie das Kommando `df`, um herauszufinden, wie viel Platz noch auf Ihrer Root-Partition (`/`) ist.
    },
    'Wie viel Platz haben Sie (in Gigabyte)?',
    'df -P -B G /',
    -> (os) do
       # Way to determine free space is really hacky but we would like
       # to avoid pulling additional gems like sys/filesystem or similar
       read_console_i == if os == :linux
         `df -P -B G /`.split(/\b/)[28].to_i
       elsif os == :macos
         `df -P -g /`.split(/\b/)[24].to_i
       end
    end
)

# du
@exercises << Exercise.new(
    'Es kommt doch auf die Größe an.',
    'Machen Sie sich mit der Funktionsweise von "du" vertraut.',
    %Q{
      Nachdem Sie jetzt wissen, dass Sie auf Ihrer Festplatte noch etwas Platz für Ihre Schnitzelrezepte haben, stellt sich die Frage, wie groß die Rezepte jetzt schon sind.

      Benutzen Sie das Kommando `du`, um herauszufinden, wie viel Platz alle Dateien im Ordner `#{PROJEKT_PATH}/chaos` zusammen verbrauchen.
    },
    'Wie viel Platz (in Megabyte) verbraucht der Ordner chaos?',
    'du -h #{PROJEKT_PATH}/chaos',
    -> (os) do
       # Way to determine used space is really hacky but we would like
       # to avoid pulling additional gems like sys/filesystem or similar
       read_console_i == if os == :linux
         `du -d0 -P -B M #{PATH}/chaos`.split(/\b/)[0].to_i
       elsif os == :macos
         `du -P -d0 -m #{PATH}/chaos`.split(/\b/)[0].to_i
       end
    end
)

# bc
@exercises << Exercise.new(
    'Kein unkalkuliertes Business!',
    'Machen Sie sich mit der Funktionsweise von "bc" vertraut.',
    %Q{
      Jetzt wo Sie wissen, wieviel Schnitzelrezepte Sie noch speichern können, fragen Sie sich, wieviele Schnitzel Sie auf dieser Insel verkaufen können.
      Kurzerhand entscheiden Sie sich mithilfe einer Bestechung an die Verkaufszahlen der Konkurrenz zu kommen.
      Nachdem Sie einen Finanzamtmitarbeiter mit einem Schnitzel bestochen haben, lässt dieser fallen, dass der Umsatz Ihres Konkurrenten etwa 3108 hoch 2000 beträgt.
      Da Sie dem Finanzamtmitarbeiter nicht trauen, beschließen Sie, diese Zahlen mit Ihrem Rechner auf Plausibilität zu prüfen.

      Benutzen Sie das Kommando `bc`, um herauszufinden, wieviel 3108 hoch 2000 beträgt.

      Tipp: Das Ergebnis wird von bc in mehrere Zeilen unterteilt. Diese sind mit einem "\\" getrennt.
    },
    'Geben Sie hier die letzte Zeile des Ergebnisses an:',
    'echo "3108^2000" | bc',
    -> () { read_console == '9443143978953998187590546511579035962672599269376' }
)


# tr
SPEISEKARTE = "Speisekarte\n\n" +
          "Jägerschnitzel        12,80\n" +
          "Wiener Schnitzel      10,70\n" +
          "Schnitzel ohne Pommes  9,88\n" +
          "Bier (0,3l)            2,70\n" +
          "Coca Cola (0,33l)      2,50\n"

@exercises << Exercise.new(
    '1337 Verschlüsselung.',
    'Machen Sie sich mit der Funktionsweise von "tr" vertraut.',
    %Q{
      Sie haben Sorgen, dass die Konkurrenz Ihre Schnitzelpreise erfährt. Deswegen haben Sie sich entschlossen, Ihre Speisekarte mit mit dem Leet-Verfahren (auch als 1337 bekannt) zu verschlüsseln. Hierzu ersetzen Sie jedes Vorkommen des Buchstaben `a`, `e`, `i`, `o`, `t` jeweils durch `4`, `3`, `1`, `0`, `7`.

      Nehmen Sie die Textdatei `speisekarte.txt` aus `#{PROJEKT_PATH}` und erzeugen Sie mit `tr` eine verschlüsselte Version namens `speisekarte-geheim.txt`, die Sie im selben Ordner ablegen.
    },
    :enter,
    'cat speisekarte.txt | tr "aeiot" "43107" > speisekarte-geheim.txt',
    -> () do
      contents = File.read("#{PATH}/speisekarte-geheim.txt") rescue ""
      contents == SPEISEKARTE.tr("aeiot", "43107")
    end,
    -> () do
      create_workdir
      File.write("#{PATH}/speisekarte.txt", SPEISEKARTE)
    end
)


start = next_exercise_from_log

# Override current progress from
# the command line
if ARGV[0]
  start = ARGV[0].to_i
end

# determine OS. Currently supported :linux and :macos
os = if RUBY_PLATFORM =~ /linux/
       :linux
     elsif RUBY_PLATFORM =~ /darwin/
       :macos
     else
       nil
     end

# Execute the exercises
@exercises.each_with_index do |exercise, index|

  # Skip already finished exercises
  next if index < start

  # Execute the exercise and log success
  puts "#{cls}"
  print progress_bar(@exercises.length, index, LINE_WIDTH)
  print "\n\n"
  exercise.execute(os)
  log_success(index, exercise)

  # Give user time to read the message before moving to the next screen
  Kernel.sleep(2)
end

# Final message - won the game
puts "#{cls}"
print progress_bar(@exercises.length, @exercises.length, LINE_WIDTH)
puts green(WINNER_MESSAGE)
needed_time = ((get_end_time - get_first_starttime)/60).round
puts green("Sie haben alle Aufgaben in #{needed_time} Minuten gelöst. Herzlichen Glückwunsch!\n")
